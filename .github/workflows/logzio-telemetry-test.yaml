name: Test `logzio-telemetry` chart
permissions:
  contents: read
on:
  pull_request:
    branches:
      - master
    paths:
      - 'charts/logzio-telemetry/templates/**'
      - 'charts/logzio-telemetry/Chart.yaml'
      - 'charts/logzio-telemetry/values.yaml'
      - 'charts/logzio-telemetry/windows_exporter_installer/**'
jobs:
  test-helm-chart:
    name: Test Helm Chart on Kind
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mode: ['daemonset', 'standalone']
    steps:
      - name: Generate random id
        id: random_id
        run: echo "::set-output name=rand::$(echo $RANDOM)"

      - name: Set ENV_ID
        run: echo "ENV_ID=telemetry-test-run-${{ steps.random_id.outputs.rand }}-${{ matrix.mode }}" >> $GITHUB_ENV
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Install Kind
        run: |
          curl -Lo ./kind "https://kind.sigs.k8s.io/dl/v0.26.0/kind-Linux-amd64"
          chmod +x ./kind
          mv ./kind /usr/local/bin/kind

      - name: Create Kind cluster
        run: |
          kind create cluster --name kind-${{ github.run_id }}-${{ matrix.mode }}
          kubectl cluster-info
      - name: Deploy Helm Chart
        run: |
          cd charts/logzio-telemetry
          helm dependency build
          helm upgrade --install \
          --set traces.enabled=true \
          --set spm.enabled=true \
          --set serviceGraph.enabled=true \
          --set metrics.enabled=true \
          --set global.tolerations[0].key="global-key" \
          --set global.tolerations[0].operator="Equal" \
          --set global.tolerations[0].value="global-value" \
          --set global.tolerations[0].effect="NoSchedule" \
          --set global.logzioTracesToken=${{ secrets.LOGZIO_TRACES_TOKEN }} \
          --set global.logzioSpmToken=${{ secrets.LOGZIO_METRICS_TOKEN }} \
          --set global.logzioMetricsToken=${{ secrets.LOGZIO_METRICS_TOKEN }} \
          --set global.logzioRegion=us \
          --set global.env_id=${{ env.ENV_ID }} \
          --set collector.mode=${{ matrix.mode }} \
          --set spanMetricsAgregator.config.connectors.spanmetrics.histogram.disable=true \
          --set enableMetricsFilter.eks=true \
          --set filters.infrastructure.exclude.namespace="kube-system" \
          --set global.signalFx.enabled=true \
          --set carbon.enabled=true \
          logzio-k8s-telemetry .
      
      - name: Verify deployment Status
        run: |
          kubectl rollout status deployment/logzio-k8s-telemetry-otel-collector-standalone --timeout=300s
          kubectl rollout status deployment/logzio-k8s-telemetry-otel-collector-spm --timeout=300s
          kubectl describe deployment/logzio-k8s-telemetry-otel-collector-spm
          kubectl describe deployment/logzio-k8s-telemetry-otel-collector-standalone
          kubectl get deployment/logzio-k8s-telemetry-otel-collector-spm -o jsonpath='{.spec.template.spec.tolerations}' | jq -r '.[] | select(.key=="global-key")'
          kubectl get deployment/logzio-k8s-telemetry-otel-collector-standalone -o jsonpath='{.spec.template.spec.tolerations}' | jq -r '.[] | select(.key=="global-key")'
      
      - name: Run trace generator
        run: |
          kubectl apply -f tests/resources/tracegen.yaml
          kubectl rollout status deployment/trace-gen --timeout=300s
      - name: Run otel demo
        run: |
          helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
          helm repo update
          helm install otel-demo -f tests/resources/otel-demo.yaml open-telemetry/opentelemetry-demo --version 0.32.5
          kubectl rollout status deployment/otel-demo-loadgenerator --timeout=300s

      - name: sleep for 3 minutes
        run: sleep 180

      - name: Run Go Tests
        env:
          LOGZIO_METRICS_API_KEY: ${{ secrets.LOGZIO_METRICS_API_KEY }}
          LOGZIO_TRACES_API_KEY: ${{ secrets.LOGZIO_TRACES_API_KEY }}
        run: |
          go get go.uber.org/zap
          go test -v ./tests/traces_e2e_test.go ./tests/common.go
          go test -v ./tests/metrics_e2e_test.go ./tests/common.go
      - name: Cleanup Environment
        run: |
          helm uninstall logzio-k8s-telemetry

      - name: Delete Kind cluster
        if: always()
        run: kind delete cluster --name kind-${{ github.run_id }}-${{ matrix.mode }}

  test-protocol-receivers:
    name: Test Protocol Receivers
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        mode: ['daemonset', 'standalone']
        protocol: ['signalfx', 'carbon']
    steps:
      - name: Generate random id
        id: random_id
        run: echo "rand=$(echo $RANDOM)" >> $GITHUB_OUTPUT

      - name: Set ENV_ID
        run: echo "ENV_ID=telemetry-test-run-${{ steps.random_id.outputs.rand }}-${{ matrix.mode }}-${{ matrix.protocol }}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Install Kind
        run: |
          curl -Lo ./kind "https://kind.sigs.k8s.io/dl/v0.26.0/kind-Linux-amd64"
          chmod +x ./kind
          mv ./kind /usr/local/bin/kind

      - name: Create Kind cluster
        run: |
          kind create cluster --name kind-${{ github.run_id }}-${{ matrix.mode }}-${{ matrix.protocol }}
          kubectl cluster-info
          
      - name: Wait for node to be ready
        run: |
          echo "Waiting for nodes to be ready..."
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          echo "Node status:"
          kubectl get nodes -o wide
          echo "Node details:"
          kubectl describe nodes
          echo "Checking for taints:"
          kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.taints}{"\n"}{end}'
          
      - name: Deploy Helm Chart with Protocol Receiver
        run: |
          cd charts/logzio-telemetry
          helm dependency build
          export RELEASE_NAME="logzio-k8s-telemetry"
          export NAMESPACE="default"
          PROTOCOL_FLAG=""
          if [[ "${{ matrix.protocol }}" == "signalfx" ]]; then
            PROTOCOL_FLAG="--set global.signalFx.enabled=true"
          elif [[ "${{ matrix.protocol }}" == "carbon" ]]; then
            PROTOCOL_FLAG="--set carbon.enabled=true"
          fi
          helm upgrade --install -n $NAMESPACE --create-namespace \
          --set metrics.enabled=true \
          --set global.logzioMetricsToken=${{ secrets.LOGZIO_METRICS_TOKEN }} \
          --set global.logzioRegion=us \
          --set global.env_id=${{ env.ENV_ID }} \
          --set collector.mode=${{ matrix.mode }} \
          $PROTOCOL_FLAG \
          $RELEASE_NAME .

      - name: Verify deployment Status
        run: |
          echo "=== Checking deployment/daemonset status ==="
          if [[ "${{ matrix.mode }}" == "standalone" ]]; then
            kubectl rollout status deployment/logzio-k8s-telemetry-otel-collector-standalone --timeout=300s
            kubectl get deployment/logzio-k8s-telemetry-otel-collector-standalone -o jsonpath='{.spec.template.spec.tolerations}' | jq -r '.[] | select(.key=="global-key")'
          else
            kubectl rollout status daemonset/logzio-k8s-telemetry-otel-collector-ds --timeout=300s
            kubectl get daemonset/logzio-k8s-telemetry-otel-collector-ds -o jsonpath='{.spec.template.spec.tolerations}' | jq -r '.[] | select(.key=="global-key")'
          fi

      - name: Run metric generator
        run: |
          # Set environment variables for envsubst
          export RELEASE_NAME="logzio-k8s-telemetry"
          export NAMESPACE="default"
          export ENV_ID="${{ env.ENV_ID }}"
          
          # Debug: Show environment variables
          echo "ENV_ID: $ENV_ID"
          echo "RELEASE_NAME: $RELEASE_NAME"
          echo "NAMESPACE: $NAMESPACE"
          
          # Substitute ENV_ID in the YAML and apply
          if [[ "${{ matrix.protocol }}" == "signalfx" ]]; then
            envsubst < tests/resources/signalfx-metrics-gen.yaml | kubectl apply -f -
          elif [[ "${{ matrix.protocol }}" == "carbon" ]]; then
            envsubst < tests/resources/carbon-metrics-gen.yaml | kubectl apply -f -
          fi

      - name: Wait for generator deployment
        run: |
          DEPLOYMENT_NAME="${{ matrix.protocol }}-gen"
          
          # Wait for deployment to be available
          kubectl rollout status deployment/$DEPLOYMENT_NAME --timeout=300s
          
          # Check if pods are running
          kubectl get pods -l app=$DEPLOYMENT_NAME
          
          # Show logs
          kubectl logs deployment/$DEPLOYMENT_NAME --tail=10
          
          # If daemonset mode, also check collector status
          if [[ "${{ matrix.mode }}" == "daemonset" ]]; then
            echo "=== Checking collector daemonset status ==="
            kubectl get daemonset -l app.kubernetes.io/name=otel-collector
            kubectl describe daemonset -l app.kubernetes.io/name=otel-collector || echo "No daemonset found"
          fi
 
      - name: Show collector logs
        run: |
          if [[ "${{ matrix.mode }}" == "standalone" ]]; then
            kubectl logs deployment/logzio-k8s-telemetry-otel-collector-standalone --tail=10
          else
            kubectl logs daemonset/logzio-k8s-telemetry-otel-collector-ds --tail=10
          fi
      - name: Sleep for metrics to be processed
        run: sleep 120

      - name: Run Protocol Specific Tests
        env:
          LOGZIO_METRICS_API_KEY: ${{ secrets.LOGZIO_METRICS_API_KEY }}
        run: |
          go get go.uber.org/zap
          if [[ "${{ matrix.protocol }}" == "signalfx" ]]; then
            go test -v ./tests/signalfx_metrics_e2e_test.go ./tests/common.go
          elif [[ "${{ matrix.protocol }}" == "carbon" ]]; then
            go test -v ./tests/carbon_metrics_e2e_test.go ./tests/common.go
          fi

      - name: Cleanup Environment
        run: |
          helm uninstall logzio-k8s-telemetry

      - name: Delete Kind cluster
        if: always()
        run: kind delete cluster --name kind-${{ github.run_id }}-${{ matrix.mode }}-${{ matrix.protocol }}

  filter-test:
    name: Filter Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        testfile:
          - relabel-advanced.yaml
          - relabel-simple.yaml
        mode: [daemonset, standalone]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Install Kind
        run: |
          curl -Lo ./kind "https://kind.sigs.k8s.io/dl/v0.26.0/kind-Linux-amd64"
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Create Kind cluster
        run: |
          kind create cluster --name kind-${{ github.run_id }}-${{ matrix.mode }}
          kubectl cluster-info
      

      - name: Deploy Helm Chart with test values
        run: |
          cd charts/logzio-telemetry
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm dependency build
          helm upgrade --install test . \
            --set collector.mode=${{ matrix.mode }} \
            --set metrics.enabled=true \
            --set applicationMetrics.enabled=true \
            --set global.logzioMetricsToken=dummy \
            -f ../../tests/filters/${{ matrix.testfile }}
      - name: Print ConfigMaps in default namespace
        run: |
          kubectl get configmap -o custom-columns=NAME:.metadata.name
      - name: Wait for ConfigMap
        run: |
          for i in {1..30}; do
            if kubectl get configmap test-otel-collector-${{ matrix.mode == 'daemonset' && 'ds' || 'standalone' }}; then
              exit 0
            fi
            echo "Waiting for ConfigMap..."
            sleep 5
          done
          echo "ConfigMap not found after waiting."
          kubectl get configmap
          exit 1
          
      - name: Describe config map
        run: |
          kubectl describe cm test-otel-collector-${{ matrix.mode == 'daemonset' && 'ds' || 'standalone' }}

      - name: Wait for all pods to be Ready
        run: |
          # Wait for all pods to exist
          for i in {1..36}; do
            PODS=$(kubectl get pods --no-headers | wc -l)
            if [[ "$PODS" -gt 0 ]]; then
              break
            fi
            echo "Waiting for pods to be created..."
            sleep 5
          done
          # Now check each pod for true readiness
          for i in {1..36}; do
            NOT_READY=0
            BAD_STATUS=0
            for POD in $(kubectl get pods --no-headers | awk '{print $1}'); do
              PHASE=$(kubectl get pod $POD -o jsonpath='{.status.phase}')
              READY=$(kubectl get pod $POD -o jsonpath='{.status.containerStatuses[*].ready}')
              RESTARTS=$(kubectl get pod $POD -o jsonpath='{.status.containerStatuses[*].restartCount}')
              WAITING_REASON=$(kubectl get pod $POD -o jsonpath='{.status.containerStatuses[0].state.waiting.reason}')
              TERMINATED_REASON=$(kubectl get pod $POD -o jsonpath='{.status.containerStatuses[0].state.terminated.reason}')
              if [[ "$PHASE" != "Running" ]]; then
                echo "Pod $POD is not Running: Phase=$PHASE"
                BAD_STATUS=1
              fi
              if [[ "$READY" != "true" ]]; then
                echo "Pod $POD is not Ready: Ready=$READY"
                NOT_READY=1
              fi
              if [[ "$WAITING_REASON" == "CrashLoopBackOff" || "$WAITING_REASON" == "Error" || "$PHASE" == "Pending" ]]; then
                echo "Pod $POD is unhealthy: WaitingReason=$WAITING_REASON Phase=$PHASE"
                BAD_STATUS=1
              fi
              if [[ "$TERMINATED_REASON" != "" ]]; then
                echo "Pod $POD has terminated: TerminatedReason=$TERMINATED_REASON"
                BAD_STATUS=1
              fi
            done
            if [[ "$NOT_READY" -eq 0 && "$BAD_STATUS" -eq 0 ]]; then
              echo "All pods are healthy and Ready."
              kubectl get pods
              exit 0
            fi
            echo "Waiting for all pods to be healthy and Ready..."
            kubectl get pods
            sleep 5
          done
          echo "ERROR: Not all pods became healthy and Ready in time."
          kubectl get pods
          kubectl describe pods
          exit 1

      - name: Cleanup
        if: always()
        run: |
          helm uninstall test || true
          kind delete cluster --name kind-${{ github.run_id }}-${{ matrix.mode }}

