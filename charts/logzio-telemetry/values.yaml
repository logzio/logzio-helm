# Default values for logzio-telemetry.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
traces:
  enabled: false
metrics:
  enabled: false
spm:
  enabled: false

nameOverride: "otel-collector"
fullnameOverride: ""

secrets:
  MetricsToken: ""
  TracesToken: ""
  SpmToken: ""
  ListenerHost: ""
  env_id: ""
  LogzioRegion: "us"
  p8s_logzio_name: ""
  windowsNodeUsername: ""
  windowsNodePassword: ""
  SampelingProbability: 100
  SampelingLatency: 0


managedServiceAccount: true

clusterRole:
  # Specifies whether a clusterRole should be created
  create: false
  # Annotations to add to the clusterRole
  annotations: {}
  # The name of the clusterRole to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # A set of rules as documented here : https://kubernetes.io/docs/reference/access-authn-authz/rbac/
  rules: []
  # - apiGroups:
  #   - ''
  #   resources:
  #   - 'pods'
  #   - 'nodes'
  #   verbs:
  #   - 'get'
  #   - 'list'
  #   - 'watch'
  clusterRoleBinding:
    # Annotations to add to the clusterRoleBinding
    annotations: {}
    # The name of the clusterRoleBinding to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

clusterRoleRules:
- apiGroups:
  - ""
  resources:
  - events
  - namespaces
  - namespaces/status
  - nodes
  - nodes/spec
  - pods
  - pods/metrics
  - nodes/metrics
  - pods/status
  - replicationcontrollers
  - replicationcontrollers/status
  - resourcequotas
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - deployments
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - get
  - list
  - watch

kubeStateMetrics:
  ## If false, kube-state-metrics sub-chart will not be installed
  ##
  enabled: true

pushGateway:
  ## If false, pushGateway sub-chart will not be installed
  ##
  enabled: true
prometheus-pushgateway:
  serviceAnnotations:
    prometheus.io/scrape: "true"
  nodeSelector:
    kubernetes.io/os: linux

nodeExporter:
  ## If false, node-exporter will not be installed
  ##
  enabled: true

emptyConfig: {}

baseCollectorConfig:
  exporters:
    logging:
      loglevel: info
  extensions:
    health_check: {}
  processors:
    batch: {}
    attributes/env_id:
      actions:
        - key: env_id
          value: ${ENV_ID}
          action: insert
    memory_limiter: null
    tail_sampling:
      decision_wait: 30s
      num_traces: 1000
      expected_new_traces_per_sec: 20
      policies:
        [
            {
              name: error-in-policy,
              type: status_code,
              status_code: {status_codes: [ERROR]}
            },
            {
              name: slow-traces-policy,
              type: latency,
              latency: {threshold_ms: "${SAMPLING_LATENCY}" }            
            },
            {
              name: probability-policy,
              type: probabilistic,
              probabilistic: {sampling_percentage: "${SAMPLING_PROBABILITY}" }
            }       
        ]
  service:
    extensions:
      - health_check
    telemetry:
      logs:
        level: "info"

tracesConfig:
  exporters:
    logzio:
      region: ${LOGZIO_LISTENER_REGION}
      account_token: ${TRACES_TOKEN}
    logging:
      loglevel: info
  extensions:
    pprof:
      endpoint: :1777
    zpages:
      endpoint: :55679
  receivers:
    jaeger:
      protocols:
        thrift_compact:
          endpoint: "0.0.0.0:6831"
        thrift_binary:
          endpoint: "0.0.0.0:6832"
        grpc:
          endpoint: "0.0.0.0:14250"
        thrift_http:
          endpoint: "0.0.0.0:14268"
    otlp:
      protocols:
        grpc:
          endpoint: "0.0.0.0:4317"
        http:
          endpoint: "0.0.0.0:4318"
    zipkin:
      endpoint: "0.0.0.0:9411"
  service:
    extensions:
      - health_check
      - pprof
      - zpages
    pipelines:
      traces:
        receivers: [jaeger, zipkin, otlp]
        processors: [tail_sampling, attributes/env_id, memory_limiter, batch]
        exporters: [logging, logzio]
    telemetry:
      logs:
        level: "info"  

spmConfig:
  processors:
    spanmetrics:
      metrics_exporter: prometheusremotewrite/spm
      latency_histogram_buckets: [2ms, 8ms, 50ms, 100ms, 200ms, 500ms, 1s, 5s, 10s]
      dimensions_cache_size: 100000
      aggregation_temporality: AGGREGATION_TEMPORALITY_CUMULATIVE
      dimensions:
        - name: http.method
        - name: env_id
          default: ${ENV_ID}
  receivers:
    # Dummy recivier 
    otlp/spm:
      protocols:
        grpc:
          endpoint: "localhost:12345"
  exporters:
    prometheusremotewrite/spm:
      endpoint: ${LISTENER_URL}
      headers:
        Authorization: "Bearer ${SPM_TOKEN}"
  service:
    pipelines:
      traces:
        receivers: [jaeger, zipkin, otlp]
        processors: [spanmetrics, tail_sampling, attributes/env_id, memory_limiter, batch]
        exporters: [logging, logzio]
      metrics/spm:
        # Dummy recivier 
        receivers: [ otlp/spm ]
        exporters: [logging, prometheusremotewrite/spm]


metricsConfig:
  extensions:
    health_check: {}
  exporters:
    prometheusremotewrite:
      endpoint: ${LISTENER_URL}
      external_labels:
        p8s_logzio_name: ${P8S_LOGZIO_NAME}
      headers:
        Authorization: "Bearer ${METRICS_TOKEN}"
  receivers:
    prometheus:
      config:
        global:
          scrape_interval: 15s
          scrape_timeout: 10s
          evaluation_interval: 10s
        scrape_configs:
        - job_name: windows-metrics
          honor_timestamps: true
          honor_labels: true
          metrics_path: /metrics
          scheme: http
          kubernetes_sd_configs:
          - role: pod
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_windows_io_scrape]
              action: keep
              regex: true|"true"
        - job_name: kubernetes-service-endpoints
          honor_timestamps: true
          honor_labels: true
          metrics_path: /metrics
          scheme: http
          kubernetes_sd_configs:
          - role: endpoints
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              action: keep
              regex: true|"true"
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              action: replace
              target_label: __scheme__
              regex: (https?)
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
              action: replace
              target_label: __address__
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: namespace
            - source_labels: [__meta_kubernetes_service_name]
              action: replace
              target_label: service
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: pod
            - source_labels: [__meta_kubernetes_pod_node_name]
              action: replace
              target_label: kubernetes_node
        - job_name: 'kubernetes-cadvisor'
          scheme: https
          metrics_path: /metrics/cadvisor
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          kubernetes_sd_configs:
          - role: node
          relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
  service:
    extensions:
      - health_check
    pipelines:
      metrics:
        exporters:
          - prometheusremotewrite
        processors:
          - attributes/env_id
          - memory_limiter
        receivers:
          - prometheus
          
# Shared params for agentCollector daemonset and standaloneCollector deployment pods.
# Can be overridden here or for any component independently using the same keys.

image:
  # If you want to use the contrib image `otel/opentelemetry-collector-contrib`, you also need to change `command.name` value to `otelcontribcol`.
  repository: otel/opentelemetry-collector-contrib
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.60.0"
nginxWindowsImage:
  # Reverse proxy image to enable metrics scraping from windows nodes
  repository: logzio/logzio-windows-node-reverse-proxy
  pullPolicy: IfNotPresent
  tag: "0.0.1"
windowsExporterInstallerImage:
  # Job image to install windows exporter on windows nodes
  repository: logzio/logzio-windows-exporter-installer
  pullPolicy: IfNotPresent
  tag: "0.0.1"
imagePullSecrets: []

# OpenTelemetry Collector executable
command:
  name: otelcol-contrib
  extraArgs: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext: {}
securityContext: {}

nodeSelector: {}
linuxNodeSelector: {
  "kubernetes.io/os": linux
}

tolerations: []

affinity: {}

extraEnvs: []
extraHostPathMounts: []
secretMounts: []

# Configuration for ports, shared between agentCollector, standaloneCollector and service.
# Can be overridden here or for agentCollector and standaloneCollector independently.
ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    hostPort: 4317
    protocol: TCP
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    hostPort: 4318
    protocol: TCP
  jaeger-compact:
    enabled: true
    containerPort: 6831
    servicePort: 6831
    hostPort: 6831
    protocol: UDP
  jaeger-thrift:
    enabled: true
    containerPort: 14268
    servicePort: 14268
    hostPort: 14268
    protocol: TCP
  jaeger-grpc:
    enabled: true
    containerPort: 14250
    servicePort: 14250
    hostPort: 14250
    protocol: TCP
  zipkin:
    enabled: true
    containerPort: 9411
    servicePort: 9411
    hostPort: 9411
    protocol: TCP


# Configuration for agent OpenTelemetry Collector daemonset, disabled by default
agentCollector:
  enabled: false

  containerLogs:
    enabled: false

  resources:
    limits:
      cpu: 256m
      memory: 512Mi
  podAnnotations: {}
  # Configuration override that will be merged into the agent's default config
  configOverride: {}
# Configuration for standalone OpenTelemetry Collector deployment, enabled by default
standaloneCollector:
  enabled: true

  containerLogs:
    enabled: false

  resources:
    limits:
      cpu: 1280m
      memory: 2560Mi

  podAnnotations: {}
  # Configuration override that will be merged into the agent's default config
  configOverride: {}

service:
  type: ClusterIP
  annotations: {}

# autoscaling is used only if standaloneCollector enabled
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

windowsExporterInstallerJob:
  interval: "*/10 * * * *"
  concurrencyPolicy: Forbid            # Future cronjob will run only after current job is finished
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  ttlSecondsAfterFinished: 3600        # First job only (Not CronJob)   

# /*Otel traces additions*/ 

podMonitor:
  enabled: false
  metricsEndpoints: {}
  # - port: prometheus
  # additional labels for the PodMonitor
  extraLabels: {}
  #   release: kube-prometheus-stack
serviceMonitor:
  enabled: false
  metricsEndpoints: {}
  # - port: metrics
  #   interval: 15s
  # additional labels for the ServiceMonitor
  extraLabels: {}
  #  release: kube-prometheus-stack

podLabels:  {}
annotations:  {}

kube-state-metrics:
  nodeSelector:
    kubernetes.io/os: linux
  podSecurityPolicy:
    enabled: false

prometheus-node-exporter:
  nodeSelector:
    kubernetes.io/os: linux
  # Prevent node exporter deamonset deploymment on fargate nodes
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: eks.amazonaws.com/compute-type
                operator: DoesNotExist
  rbac:
    pspEnabled: false

enableMetricsFilter:
  gke: false
  eks: false
  aks: false

disableKubeDnsScraping: false