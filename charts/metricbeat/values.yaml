image: "docker.elastic.co/beats/metricbeat"
imageTag: "7.9.1"
nameOverride: ""
fullnameOverride: "metricbeat"

apiVersions:
  ConfigMap: v1
  Deployment: apps/v1
  DaemonSet: apps/v1
  ServiceAccount: v1
  ClusterRole: rbac.authorization.k8s.io/v1beta1
  ClusterRoleBinding: rbac.authorization.k8s.io/v1beta1
  Secrets: v1

namespace: kube-system

shippingProtocol: http
shippingPort: 10255

serviceAccount:
  create: true
  name: metricbeat

podSecurityContext: {}

resources: {}

clusterRoleRules:
- apiGroups: [""]
  resources:
  - nodes
  - namespaces
  - events
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources:
  - replicasets
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources:
  - replicasets
  - statefulsets
  - deployments
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - nodes/stats
  verbs: ["get"]
managedServiceAccount: true
secretMounts:
- name: cert
  secretName: logzio-cert
  mountPath: "/etc/pki/tls/certs/SectigoRSADomainValidationSecureServerCA.crt"
  readOnly: true
  subPath: SectigoRSADomainValidationSecureServerCA.crt


terminationGracePeriod: 30

hostPathRoot: /var/lib

logzioCert:
  SectigoRSADomainValidationSecureServerCA.crt: |-
    -----BEGIN CERTIFICATE-----
    MIIGEzCCA/ugAwIBAgIQfVtRJrR2uhHbdBYLvFMNpzANBgkqhkiG9w0BAQwFADCB
    iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0pl
    cnNleSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNV
    BAMTJVVTRVJUcnVzdCBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTgx
    MTAyMDAwMDAwWhcNMzAxMjMxMjM1OTU5WjCBjzELMAkGA1UEBhMCR0IxGzAZBgNV
    BAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEYMBYGA1UE
    ChMPU2VjdGlnbyBMaW1pdGVkMTcwNQYDVQQDEy5TZWN0aWdvIFJTQSBEb21haW4g
    VmFsaWRhdGlvbiBTZWN1cmUgU2VydmVyIENBMIIBIjANBgkqhkiG9w0BAQEFAAOC
    AQ8AMIIBCgKCAQEA1nMz1tc8INAA0hdFuNY+B6I/x0HuMjDJsGz99J/LEpgPLT+N
    TQEMgg8Xf2Iu6bhIefsWg06t1zIlk7cHv7lQP6lMw0Aq6Tn/2YHKHxYyQdqAJrkj
    eocgHuP/IJo8lURvh3UGkEC0MpMWCRAIIz7S3YcPb11RFGoKacVPAXJpz9OTTG0E
    oKMbgn6xmrntxZ7FN3ifmgg0+1YuWMQJDgZkW7w33PGfKGioVrCSo1yfu4iYCBsk
    Haswha6vsC6eep3BwEIc4gLw6uBK0u+QDrTBQBbwb4VCSmT3pDCg/r8uoydajotY
    uK3DGReEY+1vVv2Dy2A0xHS+5p3b4eTlygxfFQIDAQABo4IBbjCCAWowHwYDVR0j
    BBgwFoAUU3m/WqorSs9UgOHYm8Cd8rIDZsswHQYDVR0OBBYEFI2MXsRUrYrhd+mb
    +ZsF4bgBjWHhMA4GA1UdDwEB/wQEAwIBhjASBgNVHRMBAf8ECDAGAQH/AgEAMB0G
    A1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAbBgNVHSAEFDASMAYGBFUdIAAw
    CAYGZ4EMAQIBMFAGA1UdHwRJMEcwRaBDoEGGP2h0dHA6Ly9jcmwudXNlcnRydXN0
    LmNvbS9VU0VSVHJ1c3RSU0FDZXJ0aWZpY2F0aW9uQXV0aG9yaXR5LmNybDB2Bggr
    BgEFBQcBAQRqMGgwPwYIKwYBBQUHMAKGM2h0dHA6Ly9jcnQudXNlcnRydXN0LmNv
    bS9VU0VSVHJ1c3RSU0FBZGRUcnVzdENBLmNydDAlBggrBgEFBQcwAYYZaHR0cDov
    L29jc3AudXNlcnRydXN0LmNvbTANBgkqhkiG9w0BAQwFAAOCAgEAMr9hvQ5Iw0/H
    ukdN+Jx4GQHcEx2Ab/zDcLRSmjEzmldS+zGea6TvVKqJjUAXaPgREHzSyrHxVYbH
    7rM2kYb2OVG/Rr8PoLq0935JxCo2F57kaDl6r5ROVm+yezu/Coa9zcV3HAO4OLGi
    H19+24rcRki2aArPsrW04jTkZ6k4Zgle0rj8nSg6F0AnwnJOKf0hPHzPE/uWLMUx
    RP0T7dWbqWlod3zu4f+k+TY4CFM5ooQ0nBnzvg6s1SQ36yOoeNDT5++SR2RiOSLv
    xvcRviKFxmZEJCaOEDKNyJOuB56DPi/Z+fVGjmO+wea03KbNIaiGCpXZLoUmGv38
    sbZXQm2V0TP2ORQGgkE49Y9Y3IBbpNV9lXj9p5v//cWoaasm56ekBYdbqbe4oyAL
    l6lFhd2zi+WJN44pDfwGF/Y4QA5C5BIG+3vzxhFoYt/jmPQT2BVPi7Fp2RBgvGQq
    6jG35LWjOhSbJuMLe/0CjraZwTiXWTb2qHSihrZe68Zk6s+go/lunrotEbaGmAhY
    LcmsJWTyXnW0OMGuf1pGg+pRyrbxmRE1a6Vqe8YAsOf4vmSyrcjC8azjUeqkk+B5
    yOGBQMkKW+ESPMFgKuOXwIlCypTPRpgSabuY0MLTDXJLR27lk8QyKGOHQ+SwMj4K
    00u/I5sUKUErmgQfky3xxzlIPK1aEn8=
    -----END CERTIFICATE-----

configType: standard

metricbeatConfig:
  standardConfig:
    metricbeat.yml: |-
      metricbeat.config.modules:
        # Mounted `metricbeat-daemonset-modules` configmap:
        path: ${path.config}/modules.d/*.yml
        # Reload module configs as they change:
        reload.enabled: false

      processors:
        - add_cloud_metadata: ~

      fields:
        logzio_codec: json
        token: ${LOGZIO_METRICS_SHIPPING_TOKEN}
        cluster: ${CLUSTER_NAME}
        type: metricbeat
      fields_under_root: true
      ignore_older: 3hr

      output:
        logstash:
          hosts: ["${LOGZIO_METRICS_LISTENER_HOST}:5015"]
          ssl:
            certificate_authorities: ['/etc/pki/tls/certs/SectigoRSADomainValidationSecureServerCA.crt']

  autodiscoverConfig:
    metricbeat.yml: |-
      metricbeat.config.modules:
        # Mounted `metricbeat-daemonset-modules` configmap:
        path: ${path.config}/modules.d/*.yml
        # Reload module configs as they change:
        reload.enabled: false

      metricbeat.autodiscover:
           providers:
             - type: kubernetes
               node: ${NODE_NAME}
               hints.enabled: true

      processors:
        - add_cloud_metadata: ~
      fields:
        logzio_codec: json
        token: ${LOGZIO_METRICS_SHIPPING_TOKEN}
        cluster: ${CLUSTER_NAME}
        type: metricbeat
      fields_under_root: true
      ignore_older: 3hr
      output:
        logstash:
          hosts: ["${LOGZIO_METRICS_LISTENER_HOST}:5015"]
          ssl:
            certificate_authorities: ['/etc/pki/tls/certs/SectigoRSADomainValidationSecureServerCA.crt']

  autoCustomConfig: {}

daemonset:
  leanConfig: false
  extraVolumeMounts:
    - name: modules
      mountPath: /usr/share/metricbeat/modules.d
      readOnly: true
  extraVolumes:
  - name: modules
    configMap:
      defaultMode: 0600
      name: metricbeat-daemonset-modules
  securityContext:
    runAsUser: 0
  resources:
    limits:
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi
  tolerations: {}
  secretMounts:
  - name: cert
    secretName: logzio-cert
    mountPath: "/etc/pki/tls/certs/SectigoRSADomainValidationSecureServerCA.crt"
    readOnly: true
    subPath: SectigoRSADomainValidationSecureServerCA.crt
  sslVerificationMode: "none"
  metricbeatConfig:
    default:
      system.yml: |-
        - module: system
          period: 10s
          metricsets:
            - cpu
            - load
            - memory
            - network
            - process
            - process_summary
            - core
            - diskio
            - socket
          processes: ['.*']
          process.include_top_n:
            by_cpu: 5      # include top 5 processes by CPU
            by_memory: 5   # include top 5 processes by memory
          cpu.metrics:  ["percentages", "normalized_percentages"]
        - module: system
          period: 1m
          metricsets:
            - filesystem
            - fsstat
          processors:
          - drop_event.when.regexp:
              system.filesystem.mount_point: '^/(sys|cgroup|proc|dev|etc|host|lib)($|/)'
      kubernetes.yml: |-
        - module: kubernetes
          period: 10s
          metricsets:
            - node
            - system
            - pod
            - container
            - volume
          host: ${NODE_NAME}
          hosts: ["${SHIPPING_PROTOCOL}://${HOST_IP}:${SHIPPING_PORT}"]
          enabled: true
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          ssl.verification_mode: ${SSL_VERIFICATION_MODE}
      #   If there is a CA bundle that contains the issuer of the certificate used in the Kubelet API,
      #   remove ssl.verification_mode entry and use the CA, for instance:
      #   ssl.certificate_authorities:
      #     - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    lean:
      system.yml: |-
        - module: system
          period: 10s
          metricsets:
            - cpu
            - load
            - memory
            - network
            - process
            - process_summary
            - core
            - diskio
            - socket
          processes: ['.*']
          process.include_top_n:
            by_cpu: 5      # include top 5 processes by CPU
            by_memory: 5   # include top 5 processes by memory
          cpu.metrics:  ["percentages", "normalized_percentages"]
          processors:
            - include_fields:
                fields: ["token","tags","type","@timestamp","event.module","metricset.name","host.name","system.cpu.cores", "system.cpu.iowait.pct", "system.cpu.nice.pct", "system.cpu.softirq.pct", "system.cpu.steal.pct", "system.cpu.system.pct", "system.cpu.user.pct", "system.diskio.io.time", "system.diskio.name", "system.diskio.read.bytes", "system.diskio.write.bytes", "system.filesystem.device", "system.filesystem.used.pct", "system.fsstat.total", "system.load.norm.", "system.memory.free", "system.memory.total", "system.memory.used.bytes", "system.memory.used.pct", "system.network.in.bytes", "system.network.name", "system.network.out.bytes", "system.process.cpu.total.pct", "system.process.memory.rss.bytes", "cluster", "system.load.norm.1", "system.load.1", "system.load.5", "system.load.15", "system.filesystem.used.pct", "system.filesystem.device_name", "system.fsstat.total_size.used", "system.fsstat.total_size.total", "system.cpu.cores", "system.process.cpu.total.pct", "system.process.memory.rss.bytes" , "process.name"]
        - module: system
          period: 1m
          metricsets:
            - filesystem
            - fsstat
          processors:
            - include_fields:
                fields: ["token","tags","type","@timestamp","event.module","metricset.name","host.name","system.cpu.cores", "system.cpu.iowait.pct", "system.cpu.nice.pct", "system.cpu.softirq.pct", "system.cpu.steal.pct", "system.cpu.system.pct", "system.cpu.user.pct", "system.diskio.io.time", "system.diskio.name", "system.diskio.read.bytes", "system.diskio.write.bytes", "system.filesystem.device", "system.filesystem.used.pct", "system.fsstat.total", "system.load.norm.", "system.memory.free", "system.memory.total", "system.memory.used.bytes", "system.memory.used.pct", "system.network.in.bytes", "system.network.name", "system.network.out.bytes", "system.process.cpu.total.pct", "system.process.memory.rss.bytes", "cluster", "system.load.norm.1", "system.load.1", "system.load.5", "system.load.15", "system.filesystem.used.pct", "system.filesystem.device_name", "system.fsstat.total_size.used", "system.fsstat.total_size.total", "system.cpu.cores", "system.process.cpu.total.pct", "system.process.memory.rss.bytes" , "process.name"]
      kubernetes.yml: |-
        - module: kubernetes
          period: 10s
          metricsets:
            - node
            - system
            - pod
            - container
            - volume
          host: ${NODE_NAME}
          hosts: ["${SHIPPING_PROTOCOL}://${HOST_IP}:${SHIPPING_PORT}"]
          enabled: true
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          ssl.verification_mode: ${SSL_VERIFICATION_MODE}
          processors:
            - include_fields:
                fields: ["token","tags","type","@timestamp","event.module","metricset.name","host.name","kubernetes.container.cpu.usage.core.ns", "kubernetes.container.id", "kubernetes.container.memory.available.bytes", "kubernetes.container.memory.workingset.bytes", "kubernetes.container.name", "kubernetes.container.rootfs.capacity.bytes", "kubernetes.container.rootfs.used.bytes", "kubernetes.container.status.phase", "kubernetes.node.cpu.capacity.cores", "kubernetes.node.fs.available.bytes", "kubernetes.node.fs.capacity.bytes", "kubernetes.node.fs.used.bytes", "kubernetes.node.name", "kubernetes.node.start", "kubernetes.node.status.ready", "kubernetes.pod.name", "kubernetes.pod.network.rx.bytes", "kubernetes.pod.network.tx.bytes", "kubernetes.pod.status.phase", "cluster", "kubernetes.namespace"]
    #     If there is a CA bundle that contains the issuer of the certificate used in the Kubelet API,
    #     remove ssl.verification_mode entry and use the CA, for instance:
    #     ssl.certificate_authorities:
    #       - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    custome: {}

deployment:
  leanConfig: false
  extraVolumeMounts:
  - name: modules
    mountPath: /usr/share/metricbeat/modules.d
    readOnly: true
  extraVolumes:
  - name: modules
    configMap:
      defaultMode: 0600
      name: metricbeat-deployment-modules
  metricbeatConfig:
    default:
      kubernetes.yml: |-
        - module: kubernetes
          metricsets:
            - state_node
            - state_deployment
            - state_replicaset
            - state_pod
            - state_container
            - event
          period: 10s
          hosts: ["kube-state-metrics.${KUBE_STATE_METRICS_NAMESPACE}:${KUBE_STATE_METRICS_PORT}"]
          enabled: true
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    lean:
      kubernetes.yml: |-
        - module: kubernetes
          metricsets:
            - state_node
            - state_deployment
            - state_replicaset
            - state_pod
            - state_container
            - event
          period: 10s
          hosts: ["kube-state-metrics.${KUBE_STATE_METRICS_NAMESPACE}:${KUBE_STATE_METRICS_PORT}"]
          enabled: true
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          processors:
            - include_fields:
                fields: ["token","tags","type","@timestamp","event.module","metricset.name","host.name","kubernetes.container.cpu.usage.core.ns", "kubernetes.container.id", "kubernetes.container.memory.available.bytes", "kubernetes.container.memory.workingset.bytes", "kubernetes.container.name", "kubernetes.container.rootfs.capacity.bytes", "kubernetes.container.rootfs.used.bytes", "kubernetes.container.status.phase", "kubernetes.node.cpu.capacity.cores", "kubernetes.node.fs.available.bytes", "kubernetes.node.fs.capacity.bytes", "kubernetes.node.fs.used.bytes", "kubernetes.node.name", "kubernetes.node.start", "kubernetes.node.status.ready", "kubernetes.pod.name", "kubernetes.pod.network.rx.bytes", "kubernetes.pod.network.tx.bytes", "kubernetes.pod.status.phase", "cluster", "kubernetes.namespace"]
    custom: {}
  securityContext:
    runAsUser: 0
  resources:
    limits:
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi
  secretMounts:
  - name: cert
    mountPath: "/etc/pki/tls/certs/SectigoRSADomainValidationSecureServerCA.crt"
    readOnly: true
    subPath: SectigoRSADomainValidationSecureServerCA.crt
secrets:
  MetricsToken: ""
  ListenerHost: ""
  ClusterName: ""
  KubeStatNamespace: ""
  KubeStatPort: ""
